# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#. "$HOME/.asdf/asdf.sh"

# If you come from bash you might have to change your $PATH.
#export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:/usr/local/go/bin:~/go/bin:/home/florianspk/.cargo/bin:$PATH"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export KUBE_EDITOR="nano"
export KUBECONFIG=$HOME/.kube/config:$HOME/.kube/config-talos:$HOME/.kube/config-talos-demo
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"
DOCKER_HOST="unix:///var/run/docker.sock"
# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/@path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(zsh-aliases-lsd z kubetail minikube kubectl git zsh-syntax-highlighting zsh-autosuggestions fzf argocd)

source $ZSH/oh-my-zsh.sh
source <(argo completion zsh)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ll="ls -ltr"
alias kctx="kubectx"
alias kns="kubens"
alias ag="argocd"
alias kar="kubectl-argo-rollouts"
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fpath=(/home/florianspk/.oh-my-zsh/custom/completions /home/florianspk/.oh-my-zsh/custom/plugins/zsh-autosuggestions /home/florianspk/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting /home/florianspk/.oh-my-zsh/plugins/git  /home/florianspk/.oh-my-zsh/functions /home/florianspk/.oh-my-zsh/completions /home/florianspk/.oh-my-zsh/cache/completions /usr/local/share/zsh/site-functions /usr/share/zsh/vendor-functions /usr/share/zsh/vendor-completions /usr/share/zsh/functions/Calendar /usr/share/zsh/functions/Chpwd /usr/share/zsh/functions/Completion /usr/share/zsh/functions/Completion/AIX /usr/share/zsh/functions/Completion/BSD /usr/share/zsh/functions/Completion/Base /usr/share/zsh/functions/Completion/Cygwin /usr/share/zsh/functions/Completion/Darwin /usr/share/zsh/functions/Completion/Debian /usr/share/zsh/functions/Completion/Linux /usr/share/zsh/functions/Completion/Mandriva /usr/share/zsh/functions/Completion/Redhat /usr/share/zsh/functions/Completion/Solaris /usr/share/zsh/functions/Completion/Unix /usr/share/zsh/functions/Completion/X /usr/share/zsh/functions/Completion/Zsh /usr/share/zsh/functions/Completion/openSUSE /usr/share/zsh/functions/Exceptions /usr/share/zsh/functions/MIME /usr/share/zsh/functions/Math /usr/share/zsh/functions/Misc /usr/share/zsh/functions/Newuser /usr/share/zsh/functions/Prompts /usr/share/zsh/functions/TCP /usr/share/zsh/functions/VCS_Info /usr/share/zsh/functions/VCS_Info/Backends /usr/share/zsh/functions/Zftp /usr/share/zsh/functions/Zle)

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# ------------------------------------
# -- Kubernetes reveal secrets
# ------------------------------------
# -- Just an alias
# ------------------------------------
alias krs="k8s_reveal_secret"
# ------------------------------------
# -- Internal function for generating 
# -- the "$KEY: $VALUE" string
# ------------------------------------
function append_to_secret() {
  SECRET=$1
  KEY=$2
  VALUE=$(kubectl get secret $SECRET -o yaml| yq ".data.\"$KEY\"" | base64 -d)
  if (( $(grep -c . <<<"$VALUE") > 1 )); then
    SECRET="$KEY: |-\n$(echo $VALUE| sed -e 's/^/  /')"
  else 
    SECRET="$KEY: $VALUE"
  fi
  echo $SECRET
}
# ------------------------------------
# -- The main function that is doing
# -- everything
# ------------------------------------
function k8s_reveal_secret() {
  if [[ "$1" != "" ]]; then
    SECRET=""
    if [[ $2 != "" ]]; then
      SECRET=$(append_to_secret $1 $2)
    else 
      for KEY in $(kubectl get secret $1 -o yaml | yq '.data | keys' | sed -e "s/- //"); do 
        SECRET="$SECRET\n$(append_to_secret $1 $KEY)";
      done
    fi
    echo $SECRET | yq
  else
    echo "You should've at least passed a secret name"
  fi
}
# ------------------------------------
# -- Completions
# ------------------------------------
function _k8s_reveal_secret(){
  local state
  _arguments -C \
               "1: :->cmds" \
               "2::arg:->args"
  case "$state" in
    cmds)
      _values compadd $(kubectl get secrets --no-headers -o custom-columns=":metadata.name")
      ;;
    args)      
      _values compadd $(for KEY in $(kubectl get secret $line[1] -o yaml | yq '.data | keys' | sed -e "s/- //"); do echo $KEY; done)
      ;;
    esac
}
compdef _k8s_reveal_secret k8s_reveal_secret
# ------------------------------------
# -- The end...
# ------------------------------------

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
